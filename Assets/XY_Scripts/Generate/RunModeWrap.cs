//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class RunModeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(RunMode), typeof(System.Object));
		L.RegFunction("Clear", Clear);
		L.RegFunction("Add", Add);
		L.RegFunction("AddShow", AddShow);
		L.RegFunction("IsShowLog", IsShowLog);
		L.RegFunction("New", _CreateRunMode);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("OnlyShow", get_OnlyShow, set_OnlyShow);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("SingleMode", get_SingleMode, set_SingleMode);
		L.RegVar("LogNetwork", get_LogNetwork, set_LogNetwork);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateRunMode(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				RunMode obj = new RunMode();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: RunMode.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			RunMode obj = (RunMode)ToLua.CheckObject(L, 1, typeof(RunMode));
			obj.Clear();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RunMode obj = (RunMode)ToLua.CheckObject(L, 1, typeof(RunMode));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.Add(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RunMode obj = (RunMode)ToLua.CheckObject(L, 1, typeof(RunMode));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.AddShow(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsShowLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RunMode obj = (RunMode)ToLua.CheckObject(L, 1, typeof(RunMode));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.IsShowLog(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnlyShow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RunMode obj = (RunMode)o;
			bool ret = obj.OnlyShow;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnlyShow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, RunMode.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SingleMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RunMode obj = (RunMode)o;
			bool ret = obj.SingleMode;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SingleMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogNetwork(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RunMode obj = (RunMode)o;
			bool ret = obj.LogNetwork;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LogNetwork on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnlyShow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RunMode obj = (RunMode)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.OnlyShow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnlyShow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SingleMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RunMode obj = (RunMode)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SingleMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SingleMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LogNetwork(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RunMode obj = (RunMode)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.LogNetwork = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LogNetwork on a nil value" : e.Message);
		}
	}
}

