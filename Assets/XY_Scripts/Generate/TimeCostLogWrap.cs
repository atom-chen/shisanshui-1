//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TimeCostLogWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TimeCostLog), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Record", Record);
		L.RegFunction("WriteLog", WriteLog);
		L.RegFunction("WiriteLog", WiriteLog);
		L.RegFunction("WriteLogToFile", WriteLogToFile);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Record(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeCostLog obj = (TimeCostLog)ToLua.CheckObject(L, 1, typeof(TimeCostLog));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Record(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteLog(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(TimeCostLog), typeof(string)))
			{
				TimeCostLog obj = (TimeCostLog)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.WriteLog(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(TimeCostLog), typeof(uint), typeof(eTimeCost), typeof(bool)))
			{
				TimeCostLog obj = (TimeCostLog)ToLua.ToObject(L, 1);
				uint arg0 = (uint)LuaDLL.lua_tonumber(L, 2);
				eTimeCost arg1 = (eTimeCost)ToLua.ToObject(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				obj.WriteLog(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: TimeCostLog.WriteLog");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WiriteLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TimeCostLog obj = (TimeCostLog)ToLua.CheckObject(L, 1, typeof(TimeCostLog));
			eTimeCost arg0 = (eTimeCost)ToLua.CheckObject(L, 2, typeof(eTimeCost));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.WiriteLog(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteLogToFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TimeCostLog obj = (TimeCostLog)ToLua.CheckObject(L, 1, typeof(TimeCostLog));
			obj.WriteLogToFile();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, TimeCostLog.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

