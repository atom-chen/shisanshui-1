//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_ContactPointWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.ContactPoint), null);
		L.RegFunction("New", _CreateUnityEngine_ContactPoint);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("point", get_point, null);
		L.RegVar("normal", get_normal, null);
		L.RegVar("thisCollider", get_thisCollider, null);
		L.RegVar("otherCollider", get_otherCollider, null);
		L.RegVar("separation", get_separation, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_ContactPoint(IntPtr L)
	{
		UnityEngine.ContactPoint obj = new UnityEngine.ContactPoint();
		ToLua.PushValue(L, obj);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_point(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ContactPoint obj = (UnityEngine.ContactPoint)o;
			UnityEngine.Vector3 ret = obj.point;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index point on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_normal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ContactPoint obj = (UnityEngine.ContactPoint)o;
			UnityEngine.Vector3 ret = obj.normal;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index normal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_thisCollider(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ContactPoint obj = (UnityEngine.ContactPoint)o;
			UnityEngine.Collider ret = obj.thisCollider;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index thisCollider on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_otherCollider(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ContactPoint obj = (UnityEngine.ContactPoint)o;
			UnityEngine.Collider ret = obj.otherCollider;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index otherCollider on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_separation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ContactPoint obj = (UnityEngine.ContactPoint)o;
			float ret = obj.separation;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index separation on a nil value" : e.Message);
		}
	}
}

